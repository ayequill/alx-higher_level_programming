``lazy_matrix_mul(...)`` returns a new matrix representing the multiplication
of ``m_a`` by ``m_b``.

>>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul
>>> m_a = [
... [1, 2],
... [3, 4],
... ]
>>> m_b = m_a
>>> print(lazy_matrix_mul(m_a, m_b))
[[ 7 10]
 [15 22]]
>>> m_a = [
... [1.2, 5.5, 6.2],
... [4.66, 12.3, -9.2]
... ]
>>> m_b = [
... [5.0, 3.3],
... [-2.9, 4.4],
... [7.2, 4.4]
... ]
>>> print(lazy_matrix_mul(m_a, m_b))
[[ 34.69   55.44 ]
 [-78.61   29.018]]
>>> print(lazy_matrix_mul(m_a))
Traceback (most recent call last):
TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'
>>> m_a = [
... [1, 2],
... [3, 4],
... ]
>>> m_b = [
... [1, 2],
... [2, 3],
... [4, 5]
... ]
>>> print(lazy_matrix_mul(m_a, m_b))
Traceback (most recent call last):
ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 3 is different from 2)
>>> print(lazy_matrix_mul([[]], [[5, 6], [7, 8]]))
Traceback (most recent call last):
ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 2 is different from 0)



