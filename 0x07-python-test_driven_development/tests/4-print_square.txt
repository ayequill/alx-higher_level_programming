Testcases for ``print_square`` function
========================================
>>> print_square = __import__("4-print_square").print_square

# Test case: print_square(4)
# Expected output:
# ####
# ####
# ####
# ####
# Explanation: The function prints a square shape with the given size, where each line contains '#' characters.
>>> print_square(4)
####
####
####
####

# Test case: print_square(10)
# Expected output:
# ##########
# ##########
# ##########
# ##########
# ##########
# ##########
# ##########
# ##########
# ##########
# ##########
# Explanation: The function prints a square shape with the given size, where each line contains '#' characters.
>>> print_square(10)
##########
##########
##########
##########
##########
##########
##########
##########
##########
##########

# Test case: print_square(0)
# Expected output: (no output)
# Explanation: The function does not print anything when the size is 0.

# Test case: print_square(1)
# Expected output: #
# Explanation: The function prints a square shape with the given size, which is a single '#' character.

# Test case: print_square(-1)
# Expected exception: ValueError
# Explanation: The function expects a size value greater than or equal to 0, so passing a negative size raises a ValueError.
>>> print_square(-1)
Traceback (most recent call last):
  ...
ValueError: size must be >= 0

# Test case: print_square(1.2)
# Expected exception: TypeError
# Explanation: The function expects the size to be an integer, so passing a float value raises a TypeError.
>>> print_square(1.2)
Traceback (most recent call last):
  ...
TypeError: size must be an integer

# Test case: print_square('1')
# Expected exception: TypeError
# Explanation: The function expects the size to be an integer, so passing a string value raises a TypeError.
>>> print_square('1')
Traceback (most recent call last):
  ...
TypeError: size must be an integer
>>> print_square()
Traceback (most recent call last):
 ...
TypeError: print_square() missing 1 required positional argument: 'size'